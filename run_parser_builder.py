from typing import Tuple, List

import lexer
from parser_builder import ParserBuilder

if __name__ == '__main__':
    IDT = lexer.TokenType.identifier
    SMP = lexer.TokenType.sql_mapper_parameter
    DQL = lexer.TokenType.double_quoted_literal
    SQL = lexer.TokenType.single_quoted_literal
    schema = IDT
    t_alias = IDT
    column = IDT
    sequence = IDT
    table = IDT
    table_or_view = IDT
    view = IDT
    materialized_view = IDT
    view_or_materialized_view = IDT
    table_or_view_or_materialized_view = IDT

    string = SQL

    data: List[Tuple[str, List]] = [
        # Oralce 11g
        ('dml', ['select']),
        ('dml', ['insert']),
        ('dml', ['update']),
        ('dml', ['delete']),
        ('dml', ['merge']),
        ('c_alias', [IDT]),
        ('t_alias', [IDT]),
        # ==================== SELECT ====================
        # https://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_10002.htm#SQLRF01702
        ('select', ['subquery', 'for_update_clause?']),
        ('subquery', ['query_block', 'order_by_clause?']),
        ('subquery', ['subquery', '{subquery::body}', 'order_by_clause?']),
        ('subquery', ['(', 'subquery', ')', 'order_by_clause?']),
        ('{subquery::body}', ['query_block', 'MINUS|UNION|INTERSECT', '{subquery::body}']),
        ('{subquery::body}', ['query_block', 'UNION', 'ALL', '{subquery::body}']),
        ('{subquery::body}', ['(', 'subquery', ')', 'MINUS|UNION|INTERSECT', '{subquery::body}']),
        ('{subquery::body}', ['(', 'subquery', ')', 'UNION', 'ALL', '{subquery::body}']),

        ('query_block', [
            'subquery_factoring_clause?', 'SELECT', 'select_list', 'FROM', '{query_block::body}', 'where_clause?',
            'hierarchical_query_clause?', 'group_by_clause?', 'model_clause?'
        ]),
        ('{query_block::body}', ['table_reference']),
        ('{query_block::body}', ['join_clause']),
        ('{query_block::body}', ['(', 'join_clause', ')']),
        ('{query_block::body}', ['{query_block::body}', ',', '{query_block::body}']),
        ('subquery_factoring_clause', ['WITH', '{subquery_factoring_clause::body}']),
        ('{subquery_factoring_clause::body}', ['query_name', '(', '{c_alias_list}', ')', 'AS', '(', 'subquery', ')', 'search_clause?', 'cycle_clause?']),
        ('{subquery_factoring_clause::body}', ['query_name', 'AS', '(', 'subquery', ')', 'search_clause?', 'cycle_clause?']),
        ('{subquery_factoring_clause::body}', ['{subquery_factoring_clause::body}', ',', '{subquery_factoring_clause::body}']),
        ('{c_alias_list}', ['c_alias', ]),
        ('{c_alias_list}', ['c_alias', ',', '{c_alias_list}']),
        ('search_clause', ['SEARCH', 'DEPTH|BREADTH', 'FIRST', 'BY', '{search_clause::body}', 'SET', 'ordering_column']),
        ('{search_clause::body}', ['c_alias', 'ASC|DESC?', 'NULLS', 'FIRST']),
        ('{search_clause::body}', ['c_alias', 'ASC|DESC?', 'NULLS', 'LAST']),
        ('{search_clause::body}', ['c_alias', 'ASC|DESC?', ]),
        ('{search_clause::body}', ['{search_clause::body}', ',', '{search_clause::body}']),
        ('cycle_clause', ['CYCLE', '{c_alias_list}', 'SET', 'cycle_mark_c_alias', 'TO', 'cycle_value', 'DEFAULT', 'no_cycle_value']),
        ('select_list', [t_alias, '.', '*']),
        ('select_list', ['*']),
        ('select_list', ['{select_list::body}']),
        ('{select_list::body}', ['query_name', '.', '*']),
        # ▼ t_alias.*와 충돌함
        # ('{select_list::body}', [table_or_view_or_materialized_view, '.', '*']),

        ('{select_list::body}', [schema, '.', table_or_view_or_materialized_view, '.', '*']),
        ('{select_list::body}', ['expr', 'AS?', 'c_alias']),
        ('{select_list::body}', ['expr']),
        ('{select_list::body}', ['{select_list::body}', ',', '{select_list::body}']),
        ('table_reference', ['{table_reference::body}', 'flashback_query_clause?', 't_alias?']),
        # ▼ query_table_expression 내에 subquery가 들어가면 그것과 충돌함
        # ('{table_reference::body}', ['ONLY', '(', 'query_table_expression', ')']),
        ('{table_reference::body}', ['query_table_expression', 'pivot_clause|unpivot_clause?']),
        ('flashback_query_clause', ['VERSIONS', 'BETWEEN', 'SCN|TIMESTAMP', 'expr|MINVALUE', 'AND', 'expr|MAXVALUE']),
        ('flashback_query_clause', ['AS', 'OF', 'SCN|TIMESTAMP', 'expr']),
        ('query_table_expression', ['query_name']),
        ('query_table_expression', [schema, '.', '{query_table_expression::body}', 'sample_clause?']),
        ('{query_table_expression::body}', [table, 'partition_extension_clause']),
        ('{query_table_expression::body}', [table_or_view_or_materialized_view]),
        ('{query_table_expression::body}', [table_or_view_or_materialized_view, '@', 'dblink']),
        # ('query_table_expression', ['(', 'subquery', ')']),
        # ('query_table_expression', ['(', 'subquery', 'subquery_restriction_clause?', ')']),
        ('query_table_expression', ['table_collection_expression']),
        ('pivot_clause', ['PIVOT', 'XML?', '(', '{pivot_clause::body}', 'pivot_for_clause', 'pivot_in_clause', ')']),
        ('{pivot_clause::body}', ['aggregate_function', '(', 'expr', ')', 'AS?', 'alias']),
        ('{pivot_clause::body}', ['aggregate_function', '(', 'expr', ')']),
        ('{pivot_clause::body}', ['{pivot_clause::body}', ',', '{pivot_clause::body}']),
        ('pivot_for_clause', ['FOR', column]),
        ('pivot_for_clause', ['FOR', '(', '{column_list}', ')']),
        ('{column_list}', [column]),
        ('{column_list}', [column, ',', '{column_list}']),
        ('pivot_in_clause', ['IN', '(', '{pivot_in_clause::body}', ')']),
        ('{pivot_in_clause::body}', ['expr', 'AS?', 'alias']),
        ('{pivot_in_clause::body}', ['expr']),
        ('{pivot_in_clause::body}', ['(', '{expr_list}', ')', 'AS?', 'alias']),
        ('{pivot_in_clause::body}', ['(', '{expr_list}', ')']),
        ('{expr_list}', ['expr', ',', '{expr_list}']),
        ('{expr_list}', ['{expr_list}', ',', '{expr_list}']),
        ('{pivot_in_clause::body}', ['{pivot_in_clause::body}', ',', '{pivot_in_clause::body}']),
        ('pivot_in_clause', ['IN', '(', 'subquery', ')']),
        ('pivot_in_clause', ['IN', '(', '{ANY_LIST}', ')']),
        ('{ANY_LIST}', ['ANY']),
        ('{ANY_LIST}', ['ANY', ',', '{ANY_LIST}']),
        ('unpivot_clause', ['UNPIVOT', 'INCLUDE|EXCLUDE', 'NULLS', '(', 'column|{column_list}', 'pivot_for_clause', 'unpivot_in_clause', ')']),
        ('unpivot_clause', ['UNPIVOT', '(', 'column|{column_list}', 'pivot_for_clause', 'unpivot_in_clause', ')']),
        ('unpivot_in_clause', ['IN', '(', '{unpivot_in_clause::body}', ')']),
        ('{unpivot_in_clause::body}', [column]),
        ('{unpivot_in_clause::body}', ['(', '{column_list}', ')']),
        ('{unpivot_in_clause::body}', [column, 'AS', 'literal']),
        ('{unpivot_in_clause::body}', [column, 'AS', '(', '{literal_list}', ')']),
        ('{unpivot_in_clause::body}', ['(', '{column_list}', ')', 'AS', 'literal']),
        ('{unpivot_in_clause::body}', ['(', '{column_list}', ')', 'AS', '(', '{literal_list}', ')']),
        ('{literal_list}', ['literal']),
        ('{literal_list}', ['literal', ',', '{literal_list}']),
        ('{unpivot_in_clause::body}', ['{unpivot_in_clause::body}', ',', '{unpivot_in_clause::body}']),
        ('sample_clause', ['SAMPLE', 'BLOCK?', '(', 'sample_percent', ')']),
        ('sample_clause', ['SAMPLE', 'BLOCK?', '(', 'sample_percent', ')', 'SEED', '(', 'seed_value', ')']),
        ('partition_extension_claus', ['PARTITION', '(', 'partition', ')']),
        ('partition_extension_claus', ['PARTITION', 'FOR', '(', '{partition_key_value_list}', ')']),
        ('partition_extension_claus', ['SUBPARTITION', '(', 'subpartition', ')']),
        ('partition_extension_claus', ['SUBPARTITION', 'FOR', '(', '{subpartition_key_value_list}', ')']),
        ('{subpartition_key_value_list}', ['subpartition_key_value']),
        ('{subpartition_key_value_list}', ['{subpartition_key_value_list}', ',', '{subpartition_key_value_list}']),
        ('subquery_restriction_clause', ['WITH', 'READ', 'ONLY', 'CONSTRAINT', 'constraint']),
        ('subquery_restriction_clause', ['WITH', 'READ', 'ONLY', ]),
        ('subquery_restriction_clause', ['WITH', 'CHECK', 'OPTION', 'CONSTRAINT', 'constraint']),
        ('subquery_restriction_clause', ['WITH', 'CHECK', 'OPTION', ]),
        ('table_collection', ['TABLE', '(', 'collection_expression', ')']),
        ('table_collection', ['TABLE', '(', 'collection_expression', ')', '(', '+', ')']),
        ('join_clause', ['table_reference', '{join_clause::body}']),
        ('{join_clause::body}', ['inner_cross_join_clause']),
        ('{join_clause::body}', ['outer_join_clause', ]),
        ('{join_clause::body}', ['{join_clause::body}', '{join_clause::body}']),
        ('inner_cross_join_clause', ['INNER?', 'JOIN', 'table_reference', 'ON', 'condition']),
        ('inner_cross_join_clause', ['INNER?', 'JOIN', 'table_reference', 'USING', '(', '{column_list}', ')']),
        ('inner_cross_join_clause', ['CROSS', 'JOIN', 'table_reference']),
        ('inner_cross_join_clause', ['NATURAL', 'INNER?', 'JOIN', 'table_reference']),
        ('outer_join_clause', ['query_partition_clause?', 'NATURAL?', 'outer_join_type', 'JOIN', 'table_reference', 'query_partition_clause?']),
        ('outer_join_clause', ['query_partition_clause?', 'NATURAL?', 'outer_join_type', 'JOIN', 'table_reference', 'query_partition_clause?', 'ON', 'condition']),
        ('outer_join_clause', ['query_partition_clause?', 'NATURAL?', 'outer_join_type', 'JOIN', 'table_reference', 'query_partition_clause?', 'USING', '(', '{column_list}', ')']),
        ('query_partition_clause', ['PARTITION', 'BY', '{expr_list}']),
        ('query_partition_clause', ['PARTITION', 'BY', '(', '{expr_list}', ')']),
        ('outer_join_type', ['FULL|LEFT|RIGHT', 'OUTER?']),
        ('where_clause', ['WHERE', 'condition']),
        ('hierarchical_query_clause', ['CONNECT', 'BY', 'NOCYCLE?', 'condition', ]),
        ('hierarchical_query_clause', ['CONNECT', 'BY', 'NOCYCLE?', 'condition', 'START', 'WITH', 'condition']),
        ('hierarchical_query_clause', ['START', 'WITH', 'condition', 'CONNECT', 'BY', 'NOCYCLE?', 'condition']),
        ('group_by_clause', ['GROUP', 'BY', '{group_by_clause::body}']),
        ('group_by_clause', ['GROUP', 'BY', '{group_by_clause::body}', 'HAVING', 'condition']),
        ('{group_by_clause::body}', ['expr']),
        ('{group_by_clause::body}', ['rollup_cube_clause']),
        ('{group_by_clause::body}', ['grouping_sets_clause']),
        ('{group_by_clause::body}', ['{group_by_clause::body}', ',', '{group_by_clause::body}']),
        ('rollup_cube_clause', ['ROLLUP|CUBE', '(', 'grouping_expression_list', ')']),
        ('grouping_sets_clause', ['GROUPING', 'SETS', '(', '{grouping_sets_clause::body}', ')']),
        ('{grouping_sets_clause::body}', ['rollup_cube_clause']),
        ('{grouping_sets_clause::body}', ['grouping_expression_list']),
        ('{grouping_sets_clause::body}', ['{grouping_sets_clause::body}', ',', '{grouping_sets_clause::body}']),
        ('grouping_expression_list', ['expression_list']),
        ('grouping_expression_list', ['grouping_expression_list', ',', 'grouping_expression_list']),
        ('expression_list', ['expr']),
        ('expression_list', ['{expression_list::body}']),
        ('{expression_list::body}', ['expr', ',', '{expression_list::body}']),
        ('expression_list', ['(', '{expr_list}', ')']),
        ('model_clause', ['MODULE', 'cell_reference_options?', 'return_rows_clause?', '{reference_model_list}?', 'main_model']),
        ('{reference_model_list}', ['reference_model', '{reference_model_list}']),
        ('{reference_model_list}', ['reference_model']),
        ('cell_reference_options', ['IGNORE|KEEP', 'NAV']),
        ('cell_reference_options', ['IGNORE|KEEP', 'NAV', 'UNIQUE', 'DIMENSION']),
        ('cell_reference_options', ['IGNORE|KEEP', 'NAV', 'UNIQUE', 'SINGLE', 'REFERENCE']),
        ('cell_reference_options', ['UNIQUE', 'SINGLE', 'REFERENCE']),
        ('return_rows_clause', ['RETURN', 'UPDATED|ALL', 'ROWS']),
        ('reference_model', ['REFERENCE', 'reference_model_name', 'ON', '(', 'subquery', ')', 'model_column_clause', 'cell_reference_options?']),
        ('main_model', ['MAIN', 'main_model_name', 'model_column_clauses', 'cell_reference_options?', 'model_rules_clause']),
        ('main_model', ['model_column_clauses', 'cell_reference_options?', 'model_rules_clause']),
        ('model_column_clauses', ['{model_column_clauses::head}?', 'DIMENSION', 'BY', '(', '{model_column_clauses::body}', ')', 'MEASURES', '(', '{model_column_clauses::body}', ')']),
        ('{model_column_clauses::head}', ['PARTITION', 'BY', '(', '{model_column_clauses::body}', ')']),
        ('{model_column_clauses::body}', ['expr', 'c_alias?']),
        ('{model_column_clauses::body}', ['{model_column_clauses::body}', ',', '{model_column_clauses::body}']),
        ('model_column', ['expr', 'AS?', 'c_alias']),
        ('model_column', ['expr']),
        ('model_rules_clause', ['{model_rules_clause::head}', '(', '{model_rules_clause::body}', ')']),
        ('{model_rules_clause::head}', ['RULES', 'UPDATE?', 'AUTOMATIC|SEQUENTIAL', 'ORDER', 'model_iterate_clause?']),
        ('{model_rules_clause::head}', ['RULES', 'UPSERT', 'ALL?', 'AUTOMATIC|SEQUENTIAL', 'ORDER', 'model_iterate_clause?']),
        ('{model_rules_clause::head}', ['RULES', 'UPDATE?', 'model_iterate_clause?']),
        ('{model_rules_clause::head}', ['RULES', 'UPSERT', 'ALL?', 'model_iterate_clause?']),
        ('{model_rules_clause::body}', ['UPDATE?', 'cell_assignment', 'order_by_clause?', '=', 'expr']),
        ('{model_rules_clause::body}', ['UPSERT', 'ALL?', 'cell_assignment', 'order_by_clause?', '=', 'expr']),
        ('{model_rules_clause::body}', ['{model_rules_clause::body}', ',', '{model_rules_clause::body}']),
        ('model_iterate_clause', ['ITERATE', '(', 'number', ')']),
        ('model_iterate_clause', ['ITERATE', '(', 'number', ')', 'UNTIL', '(', 'condition', ')']),
        ('cell_assignment', ['measure_column', '[', 'multi_column_for_loop|{cell_assignment::body}', ']']),
        ('{cell_assignment::body}', ['condition|expr|single_column_for_loop']),
        ('{cell_assignment::body}', ['{cell_assignment::body}', ',', '{cell_assignment::body}']),
        ('single_column_for_loop', ['FOR', 'dimension_column', 'IN', '(', '{literal_list}|subquery', ')']),
        ('single_column_for_loop', ['FOR', 'dimension_column', 'LIKE', 'pattern', 'FROM', 'literal', 'TO', 'literal', 'INCREMENT|DECREMENT', 'literal']),
        ('single_column_for_loop', ['FOR', 'dimension_column', 'FROM', 'literal', 'TO', 'literal', 'INCREMENT|DECREMENT', 'literal']),
        ('multi_column_for_loop', ['FOR', '(', '{dimension_column_list}', ')', 'IN', '(', 'subquery|{multi_column_for_loop::body}', ')']),
        ('{multi_column_for_loop::body}', ['(', '{literal_list}', ')']),
        ('{multi_column_for_loop::body}', ['{multi_column_for_loop::body}', ',', '{multi_column_for_loop::body}']),
        ('order_by_clause', ['ORDER', 'SIBLINGS?', 'BY', '{order_by_clause::body}']),
        ('{order_by_clause::body}', ['expr|position|c_alais', 'ASC|DESC', 'NULLS', 'FIRST|LAST']),
        ('{order_by_clause::body}', ['expr|position|c_alais', 'ASC|DESC', ]),
        ('{order_by_clause::body}', ['expr|position|c_alais', 'NULLS', 'FIRST|LAST']),
        ('{order_by_clause::body}', ['{order_by_clause::body}', ',', '{order_by_clause::body}']),
        ('for_update_clause', ['FOR', 'UPDATE', 'OF', '{for_update_clause::body}', ]),
        ('for_update_clause', ['FOR', 'UPDATE', 'OF', '{for_update_clause::body}', 'SKIP', 'LOCKED']),
        ('for_update_clause', ['FOR', 'UPDATE', 'OF', '{for_update_clause::body}', 'NOWAIT']),
        ('for_update_clause', ['FOR', 'UPDATE', 'OF', '{for_update_clause::body}', 'WAIT', 'integer']),
        ('{for_update_clause::body}', [column]),
        ('{for_update_clause::body}', [table_or_view, '.', column]),
        ('{for_update_clause::body}', [schema, '.', table_or_view, '.', column]),
        ('{for_update_clause::body}', ['{for_update_clause::body}', ',', '{for_update_clause::body}']),

        # ==================== INSERT ====================
        # https://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_9014.htm#SQLRF01604
        ('insert', ['INSERT', 'hint?', 'single_table_insert|multi_table_insert']),
        ('single_table_insert', ['insert_into_clause', 'values_clause', 'returning_clause?', 'error_logging_clause?']),
        ('single_table_insert', ['insert_into_clause', 'subquery', 'error_logging_clause?']),
        ('insert_into_clause', ['INTO', 'dml_table_expression_clause', 't_alias?']),
        ('insert_into_clause', ['INTO', 'dml_table_expression_clause', 't_alias?', '(', '{column_list}', ')']),
        ('values_clause', ['VALUES', '(', '{values_clause::body}', ')']),
        ('{values_clause::body}', ['expr']),
        ('{values_clause::body}', ['DEFAULT']),
        ('{values_clause::body}', ['{values_clause::body}', ',', '{values_clause::body}']),
        ('returning_clause', ['RETURN|RETUNING', '{expr_list}', 'INTO', '{data_item_list}']),
        ('{data_item_list}', ['data_item']),
        ('{data_item_list}', ['{data_item_list}', ',', '{data_item_list}']),
        ('multi_table_insert', ['ALL', ',', '{multi_table_insert::body}', 'subquery']),
        ('multi_table_insert', ['conditional_insert_clause']),
        ('{multi_table_insert::body}', ['insert_into_clause', 'values_clause?', 'error_logging_clause?', '{multi_table_insert::body}']),
        ('{multi_table_insert::body}', ['{multi_table_insert::body}', ',', '{multi_table_insert::body}']),
        ('conditional_insert_clause', ['ALL|FIRST?', '{conditional_insert_clause::body}']),
        ('conditional_insert_clause', ['ALL|FIRST?', '{conditional_insert_clause::body}', 'ELSE', '{conditional_insert_clause::tail}?']),
        ('{conditional_insert_clause::body}', ['WHEN', 'condition', 'THEN', '{conditional_insert_clause::body::body}']),
        ('{conditional_insert_clause::body}', ['{conditional_insert_clause::body}', '{conditional_insert_clause::body}']),
        ('{conditional_insert_clause::body::body}', ['insert_into_clause', 'values_clause?', 'error_logging_clause?']),
        ('{conditional_insert_clause::tail}', ['insert_into_clause', 'values_clause?', 'error_logging_clause?']),
        ('{conditional_insert_clause::tail}', ['{conditional_insert_clause::tail}', '{conditional_insert_clause::tail}']),
        ('dml_table_expression_clause', [schema, '.', table, 'partition_extension_clause']),
        ('dml_table_expression_clause', [schema, '.', table_or_view_or_materialized_view]),
        ('dml_table_expression_clause', [schema, '.', table_or_view_or_materialized_view, '@', 'dblink']),
        ('dml_table_expression_clause', [table, 'partition_extension_clause']),
        ('dml_table_expression_clause', [table_or_view_or_materialized_view]),
        ('dml_table_expression_clause', [table_or_view_or_materialized_view, '@', 'dblink']),
        ('dml_table_expression_clause', ['(', 'subquery', 'subquery_restriction_clause?', ')']),
        ('dml_table_expression_clause', ['table_collection_expression']),
        ('partition_extension_clause', ['PARTITION', '(', 'partition', ')']),
        ('partition_extension_clause', ['FOR', '(', '{partition_key_value_list}', ')']),
        ('{partition_key_value_list}', ['partition_key_value']),
        ('{partition_key_value_list}', ['{partition_key_value_list}', ',', '{partition_key_value_list}']),
        ('partition_extension_clause', ['SUBPARTITION', '(', 'subpartition', ')']),
        ('partition_extension_clause', ['FOR', '(', '{subpartition_key_value_list}', ')']),
        ('table_collection_expression', ['TABLE', '(', 'collection_expression', ')', ]),
        ('table_collection_expression', ['TABLE', '(', 'collection_expression', ')', '(', '+', ')']),
        ('error_logging_clause', ['LOG', 'ERRORS', '{error_logging_clause::head}?', '{error_logging_clause::body}?', '{error_logging_clause::tail}?']),
        ('{error_logging_clause::head}', ['INTO', table]),
        ('{error_logging_clause::head}', ['INTO', schema, '.', table]),
        ('{error_logging_clause::body}', ['(', 'simple_expression', ')']),
        ('{error_logging_clause::tail}', ['REJECT', 'LIMIT', 'integer', 'UNLIMITED']),
        # # ==================== UPDATE ====================
        # # https://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_10008.htm#SQLRF01708
        ('update', ['UPDATE', 'hint?', 'dml_table_expression_clause', 't_alias?', 'update_set_clause', 'where_clause?', 'returning_clause?', 'error_logging_clause?']),
        ('update', ['UPDATE', 'hint?', 'ONLY', '(', 'dml_table_expression_clause', ')', 't_alias?', 'update_set_clause', 'where_clause?', 'returning_clause?', 'error_logging_clause?']),
        ('update_set_clause', ['SET', '{update_set_clause:;body}']),
        ('update_set_clause', ['SET', 'VALUES', '(', 't_alais', ')', '=', 'expr']),
        ('update_set_clause', ['SET', 'VALUES', '(', 't_alais', ')', '=', '(', 'subquery', ')']),
        ('{update_set_clause:;body}', ['(', '{column_list}', ')', '=', '(', 'subquery', ')']),
        ('{update_set_clause:;body}', [column, '=', 'expr']),
        ('{update_set_clause:;body}', [column, '=', '(', 'subquery', ')']),
        ('{update_set_clause:;body}', [column, '=', 'DEFAULT']),
        # # ==================== DELETE ====================
        # # https://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_8005.htm#SQLRF01505
        ('delete', ['DELETE', 'hint?', 'FROM', 'dml_table_expression_clause', 't_alias?', 'where_clause?', 'returning_clause?', 'error_logging_clause?']),
        ('delete', ['DELETE', 'hint?', 'FROM', 'ONLY', '(', 'dml_table_expression_clause', ')', 't_alias?', 'where_clause?', 'returning_clause?', 'error_logging_clause?']),
        # # ==================== MERGE =====================
        # # https://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_9016.htm#SQLRF01606
        ('merge', ['MERGE', 'hint?', 'INTO', schema, '.', table_or_view, 't_alias?', 'USING', schema, '.', table_or_view, 't_alias?', 'ON', '(', 'condition', ')', 'merge_update_clause?', 'merge_insert_clause?', 'error_logging_clause?']),
        ('merge', ['MERGE', 'hint?', 'INTO', schema, '.', table_or_view, 't_alias?', 'USING', table_or_view, 't_alias?', 'ON', '(', 'condition', ')', 'merge_update_clause?', 'merge_insert_clause?', 'error_logging_clause?']),
        ('merge', ['MERGE', 'hint?', 'INTO', schema, '.', 'subquery', 't_alias?', 'USING', table_or_view, 't_alias?', 'ON', '(', 'condition', ')', 'merge_update_clause?', 'merge_insert_clause?', 'error_logging_clause?']),
        ('merge', ['MERGE', 'hint?', 'INTO', table_or_view, 't_alias?', 'USING', schema, '.', table_or_view, 't_alias?', 'ON', '(', 'condition', ')', 'merge_update_clause?', 'merge_insert_clause?', 'error_logging_clause?']),
        ('merge', ['MERGE', 'hint?', 'INTO', table_or_view, 't_alias?', 'USING', table_or_view, 't_alias?', 'ON', '(', 'condition', ')', 'merge_update_clause?', 'merge_insert_clause?', 'error_logging_clause?']),
        ('merge', ['MERGE', 'hint?', 'INTO', 'subquery', 't_alias?', 'USING', table_or_view, 't_alias?', 'ON', '(', 'condition', ')', 'merge_update_clause?', 'merge_insert_clause?', 'error_logging_clause?']),
        ('merge_update_clause', ['WHEN', 'MATCHED', 'THEN', 'UPDATE', 'SET', '{merge_update_clause::body}', 'where_clause?']),
        ('merge_update_clause', ['WHEN', 'MATCHED', 'THEN', 'UPDATE', 'SET', '{merge_update_clause::body}', 'where_clause?', 'DELETE', 'where_clause']),
        ('{merge_update_clause::body}', [column, '=', 'expr|DEFAULT']),
        ('{merge_update_clause::body}', ['{merge_update_clause::body}', ',', '{merge_update_clause::body}']),
        ('merge_insert_clause', ['WHEN', 'NOT', 'MATCHED', 'THEN', 'INSERT', '(', '{column_list}', ')', 'VALUES', '(', '{merge_insert_clause::body}', 'where_clause?']),
        ('{merge_insert_clause::body}', ['expr|DEFAULT']),
        ('{merge_insert_clause::body}', ['{merge_insert_clause::body}', ',', '{merge_insert_clause::body}']),
        # # ==================== HINT =====================
        # # https://docs.oracle.com/cd/E11882_01/server.112/e41084/sql_elements006.htm#SQLRF00219
        # ('hint', ['/*+', '{hint::body}', '*/']),
        # ('{hint::body}', ['{hint}', 'string?']),
        # ('{hint::body}', ['{hint::body}', ',', '{hint::body}']),
        # ('{hint}', ['ALL_ROWS']),
        # # throughput best
        # ('{hint}', ['APPEND']),
        # # direct path for insert + subquery
        # ('{hint}', ['APPEND_VALUES']),
        # # direct path for insert + values
        # ('{hint}', ['CACHE', '(', 'tablespec', ')']),
        # ('{hint}', ['CACHE', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['CHANGE_DUPKEY_ERROR_INDEX', '(', table, '.', 'index', ')']),
        # ('{hint}', ['CHANGE_DUPKEY_ERROR_INDEX', '(', table, '(', '{column_list}', ')', ')']),
        # # pop ORA-38911 insetead of ORA-00001
        # ('{hint}', ['CLUSTER', '(', 'tablespec', ')']),
        # ('{hint}', ['CLUSTER', '(', '@', 'queryblock', 'tablespec', ')']),
        # # cluster scan
        # ('{hint}', ['CURSOR_SHARING_EXACT']),
        # ('{hint}', ['DRIVING_SITE', '(', 'tablespec', ')']),
        # ('{hint}', ['DRIVING_SITE', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['DYNAMIC_SAMPLING', '(', 'tablespec?', 'integer', ')']),
        # ('{hint}', ['DYNAMIC_SAMPLING', '(', '@', 'queryblock', 'tablespec?', 'integer', ')']),
        # ('{hint}', ['FACT', '(', 'tablespec', ')']),
        # ('{hint}', ['FACT', '(', '@', 'queryblock', 'tablespec', ')']),
        # # star transformation
        # ('{hint}', ['FIRST_ROWS', '(', 'integer', ')']),
        # ('{hint}', ['FULL', '(', 'tablespec', ')']),
        # ('{hint}', ['FULL', '(', '@', 'query_block', 'tablespec', ')']),
        # # full table scan
        # ('{hint}', ['HASH', '(', 'tablespec', ')']),
        # ('{hint}', ['HASH', '(', '@', 'query_block', 'tablespec', ')']),
        # # hash scan. applies only hash cluster
        # ('{hint}', ['IGNORE_ROW_ON_DUPKEY_INDEX', '(', table, '.', 'index', ')']),
        # ('{hint}', ['IGNORE_ROW_ON_DUPKEY_INDEX', '(', table, '(', '{column_list}', ')', ')']),
        # # ignore unique key violation. applies only insert
        # ('{hint}', ['INDEX', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX', '(', 'tablespec', ')']),
        # ('{hint}', ['INDEX', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{indexspec_list}', ['indexspec']),
        # ('{indexspec_list}', ['{indexspec_list}', '{indexspec_list}']),
        # # use index scan
        # ('{hint}', ['INDEX_ASC', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_ASC', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_ASC', '(', 'tablespec', ')']),
        # ('{hint}', ['INDEX_ASC', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['INDEX_COMBINE', '(', 'tablespec', ')']),
        # ('{hint}', ['INDEX_COMBINE', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['INDEX_COMBINE', '(', 'tablespec', ')']),
        # ('{hint}', ['INDEX_COMBINE', '(', '@', 'query_block', 'tablespec', ')']),
        # # bitmap access path
        # ('{hint}', ['INDEX_DESC', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_DESC', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_DESC', '(', 'tablespec', ')']),
        # ('{hint}', ['INDEX_DESC', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['INDEX_FFS', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_FFS', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_FFS', '(', 'tablespec', ')']),
        # ('{hint}', ['INDEX_FFS', '(', '@', 'query_block', 'tablespec', ')']),
        # # fast full index scan
        # ('{hint}', ['INDEX_JOIN', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_JOIN', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_JOIN', '(', 'tablespec', ')']),
        # ('{hint}', ['INDEX_JOIN', '(', '@', 'query_block', 'tablespec', ')']),
        # # index join as access path
        # ('{hint}', ['INDEX_SS', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_SS', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_SS', '(', 'tablespec', ')']),
        # ('{hint}', ['INDEX_SS', '(', '@', 'query_block', 'tablespec', ')']),
        # # index skip scan
        # ('{hint}', ['INDEX_SS_ASC', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_SS_ASC', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_SS_ASC', '(', 'tablespec', ')']),
        # ('{hint}', ['INDEX_SS_ASC', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['INDEX_SS_DESC', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_SS_DESC', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['INDEX_SS_DESC', '(', 'tablespec', ')']),
        # ('{hint}', ['INDEX_SS_DESC', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['LEADING', '(', 'tablespec', ')']),
        # ('{hint}', ['LEADING', '(', '@', 'query_block', '{tablespec_list}', ')']),
        # # set prefix in the execution plan
        # ('{tablespec_list}', ['tablespec']),
        # ('{tablespec_list}', ['{tablespec_list}', '{tablespec_list}']),
        # ('{hint}', ['MERGE', ]),
        # ('{hint}', ['MERGE', '(', 'tablespec', ')']),
        # ('{hint}', ['MERGE', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['MERGE', '(', '@', 'query_block', ')']),
        # # merge views in query
        # ('{hint}', ['MODEL_MIN_ANALYSIS', ]),
        # ('{hint}', ['MONITOR', ]),
        # ('{hint}', ['NATIVE_FULL_OUTER_JOIN', ]),
        # # NFOJ based on hash join
        # ('{hint}', ['NOAPPEND', ]),
        # ('{hint}', ['NOCACHE', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['NOCACHE', '(', '@', 'tablespec', ')']),
        # ('{hint}', ['NO_EXPAND', '(', '@', 'query_block', ')']),
        # ('{hint}', ['NO_EXPAND', ]),
        # ('{hint}', ['NO_FACT', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['NO_FACT', '(', 'tablespec', ')']),
        # ('{hint}', ['NO_INDEX', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['NO_INDEX', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['NO_INDEX', '(', 'tablespec', ')']),
        # ('{hint}', ['NO_INDEX', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['NO_INDEX_FFS', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['NO_INDEX_FFS', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['NO_INDEX_FFS', '(', 'tablespec', ')']),
        # ('{hint}', ['NO_INDEX_FFS', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['NO_INDEX_SS', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['NO_INDEX_SS', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['NO_INDEX_SS', '(', 'tablespec', ')']),
        # ('{hint}', ['NO_INDEX_SS', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['NO_MERGE', ]),
        # ('{hint}', ['NO_MERGE', '(', 'tablespec', ')']),
        # ('{hint}', ['NO_MERGE', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['NO_MERGE', '(', '@', 'query_block', ')']),
        # ('{hint}', ['NO_MONITOR', ]),
        # ('{hint}', ['NO_NATIVE_FULL_OUTER_JOIN', ]),
        # ('{hint}', ['NO_PARALLEL', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['NO_PARALLEL', '(', 'tablespec', ')']),
        # ('{hint}', ['NO_PARALLEL_INDEX', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['NO_PARALLEL_INDEX', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['NO_PARALLEL_INDEX', '(', 'tablespec', ')']),
        # ('{hint}', ['NO_PARALLEL_INDEX', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['NO_PUSH_PRED', ]),
        # ('{hint}', ['NO_PUSH_PRED', '(', 'tablespec', ')']),
        # ('{hint}', ['NO_PUSH_PRED', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['NO_PUSH_PRED', '(', '@', 'query_block', ')']),
        # ('{hint}', ['NO_PUSH_SUBQ', ]),
        # ('{hint}', ['NO_PUSH_SUBQ', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['NO_PX_JOIN_FILTER', '(', 'tablespec', ')']),
        # ('{hint}', ['NO_QUERY_TRANSFORMATION']),
        # ('{hint}', ['NO_RESULT_CACHE']),
        # ('{hint}', ['NO_REWRITE', ]),
        # ('{hint}', ['NO_REWRITE', '(', '@', 'query_block', ')']),
        # ('{hint}', ['NO_TRANSFORMATION', ]),
        # ('{hint}', ['NO_TRANSFORMATION', '(', '@', 'query_block', ')']),
        # ('{hint}', ['NO_STATEMENT_QUEUEING', ]),
        # ('{hint}', ['NO_UNNEST', ]),
        # ('{hint}', ['NO_UNNEST', '(', '@', 'query_block', ')']),
        # ('{hint}', ['NO_USE_HASH', '(', '@', 'query_block', '{tablespec_list}', ')']),
        # ('{hint}', ['NO_USE_HASH', '(', '{tablespec_list}', ')']),
        # ('{hint}', ['NO_USE_MERGE', '(', '@', 'query_block', '{tablespec_list}', ')']),
        # ('{hint}', ['NO_USE_MERGE', '(', '{tablespec_list}', ')']),
        # ('{hint}', ['NO_USE_NL', '(', '@', 'query_block', '{tablespec_list}', ')']),
        # ('{hint}', ['NO_USE_NL', '(', '{tablespec_list}', ')']),
        # ('{hint}', ['NO_XML_QUERY_REWRITE', ]),
        # ('{hint}', ['NO_XMLINDEX_REWRITE', ]),
        # ('{hint}', ['OPT_PARAM', '(', 'parameter_name', ',?', 'parameter_value' ')']),
        # ('{hint}', ['ORDERED']),
        # ('{hint}', ['PARALLEL']),
        # ('{hint}', ['PARALLEL', '(', 'DEFAULT|AUTO|MANUAL|integer', ')']),
        # ('{hint}', ['PARALLEL', '(', '@', 'query_block', 'tablespec', 'integer|DEFAULT?', ')']),
        # ('{hint}', ['PARALLEL', '(', 'tablespec', 'integer|DEFAULT?', ')']),
        # ('{hint}', ['PARALLEL_INDEX', '(', 'tablespec', '{indexspec_list}', 'integer|DEFAULT?', ')']),
        # ('{hint}', ['PARALLEL_INDEX', '(', '@', 'query_block', 'tablespec', '{indexspec_list}', 'integer|DEFAULT?', ')']),
        # ('{hint}', ['PARALLEL_INDEX', '(', 'tablespec', 'integer|DEFAULT?', ')']),
        # ('{hint}', ['PARALLEL_INDEX', '(', '@', 'query_block', 'tablespec', 'integer|DEFAULT?', ')']),
        # ('{hint}', ['PQ_DISTRIBUTE', '(', 'tablespec', 'distribution', ')']),
        # ('{hint}', ['PQ_DISTRIBUTE', '(', 'tablespec', 'outer_distribution', 'inner_distribution', ')']),
        # ('{hint}', ['PQ_DISTRIBUTE', '(', '@', 'query_block', 'tablespec', 'distribution', ')']),
        # ('{hint}', ['PQ_DISTRIBUTE', '(', '@', 'query_block', 'tablespec', 'outer_distribution', 'inner_distribution', ')']),
        # ('{hint}', ['PUSH_PRED', ]),
        # ('{hint}', ['PUSH_PRED', '(', 'tablespec', ')']),
        # ('{hint}', ['PUSH_PRED', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['PUSH_PRED', '(', '@', 'query_block', ')']),
        # ('{hint}', ['PUSH_SUBQ', ]),
        # ('{hint}', ['PUSH_SUBQ', '(', '@', 'query_block', 'tablespec', ')']),
        # ('{hint}', ['PX_JOIN_FILTER', '(', 'tablespec', ')']),
        # ('{hint}', ['QB_NAME', '(', 'query_block', ')']),
        # ('{hint}', ['RESULT_CACHE', '(', 'query_block', ')']),
        # ('{hint}', ['RETRY_ON_ROW_CHANGE']),
        # ('{hint}', ['REWRITE']),
        # ('{hint}', ['REWRITE', '(', '@', 'queryblock', '{view_list}', ')']),
        # ('{hint}', ['REWRITE', '(', '{view_list}', ')']),
        # ('{view_list}', ['{view_list}', ',', '{view_list}']),
        # ('{hint}', ['STAR_TRANSFORMATION']),
        # ('{hint}', ['STAR_TRANSFORMATION', '(', '@', 'queryblock', ')']),
        # ('{hint}', ['STATEMENT_QUEUING']),
        # ('{hint}', ['UNNEST']),
        # ('{hint}', ['UNNEST', '(', '@', 'queryblock', ')']),
        # ('{hint}', ['USE_CONCAT']),
        # ('{hint}', ['USE_CONCAT', '(', '@', 'queryblock', ')']),
        # ('{hint}', ['USE_HASH', '(', '{tablespec_list}', ')']),
        # ('{hint}', ['USE_HASH', '(', '@', 'queryblock', '{tablespec_list}', ')']),
        # ('{hint}', ['USE_MERGE', '(', '{tablespec_list}', ')']),
        # ('{hint}', ['USE_MERGE', '(', '@', 'queryblock', '{tablespec_list}', ')']),
        # ('{hint}', ['USE_NL', '(', '{tablespec_list}', ')']),
        # ('{hint}', ['USE_NL', '(', '@', 'queryblock', '{tablespec_list}', ')']),
        # ('{hint}', ['USE_NL_WITH_INDEX', '(', 'tablespec', '{indexspec_list}', ')']),
        # ('{hint}', ['USE_NL_WITH_INDEX', '(', '@', 'queryblock', 'tablespec', '{indexspec_list}', ')']),
        # # ==================== expr =====================
        # # https://docs.oracle.com/cd/E11882_01/server.112/e41084/expressions001.htm#SQLRF52066
        ('expr', ['simple_expression']),
        ('expr', ['compound_expression']),
        ('expr', ['case_expression']),
        ('expr', ['cursor_expression']),
        ('expr', ['datetime_expression']),
        ('expr', ['function_expression']),
        ('expr', ['interval_expression']),
        ('expr', ['object_access_expression']),
        ('expr', ['scalar_subquery_expression']),
        ('expr', ['model_expression']),
        ('expr', ['type_constructor_expression']),
        ('expr', ['variable_expression']),
        ('expr', ['placeholder_expression']),
        ('expr', [SMP]),

        ('{expr^compound_expression}', ['simple_expression']),
        ('{expr^compound_expression}', ['case_expression']),
        # ('{expr^compound_expression}', ['cursor_expression']),
        ('{expr^compound_expression}', ['datetime_expression']),
        ('{expr^compound_expression}', ['function_expression']),
        # ('{expr^compound_expression}', ['interval_expression']),
        ('{expr^compound_expression}', ['object_access_expression']),
        ('{expr^compound_expression}', ['scalar_subquery_expression']),
        ('{expr^compound_expression}', ['model_expression']),
        ('{expr^compound_expression}', ['type_constructor_expression']),
        ('{expr^compound_expression}', ['variable_expression']),

        ('simple_expression', ['query_name', '.', 'column|ROWID']),
        ('simple_expression', [column, ]),
        ('simple_expression', [schema, '.', table_or_view_or_materialized_view, '.', 'ROWID']),
        ('simple_expression', [schema, '.', table_or_view_or_materialized_view, '.', column]),
        ('simple_expression', [table_or_view_or_materialized_view, '.', 'ROWID']),
        ('simple_expression', [table_or_view_or_materialized_view, '.', column]),
        ('simple_expression', ['ROWNUM']),
        ('simple_expression', [string]),
        ('simple_expression', ['number']),
        ('simple_expression', [sequence, '.', 'CURRVAL|NEXTVAL']),
        ('simple_expression', ['NULL']),

        ('compound_expression', ['{expr_with_parenthesis}']),
        ('compound_expression', ['+|-|PRIOR', 'expr']),
        ('compound_expression', ['{expr^compound_expression}', r'*|/|+|-|\|\||PRIOR', 'expr']),

        ('case_expression', ['CASE', 'simple_case_expression|searched_case_expression', 'else_clause?', 'END']),
        ('simple_case_expression', ['expr', '{simple_case_expression::body}']),
        ('{simple_case_expression::body}', ['THEN', 'comparison_expr', 'THEN', 'return_expr']),
        ('{simple_case_expression::body}', ['{simple_case_expression::body}', '{simple_case_expression::body}']),
        ('searched_case_expression', ['{searched_case_expression::body}']),
        ('{searched_case_expression::body}', ['WHEN', 'condition', 'THEN', 'return_expr']),
        ('{searched_case_expression::body}', ['{searched_case_expression::body}', '{searched_case_expression::body}']),
        ('else_clause', ['ELSE', 'else_expr']),

        ('cursor_expression', ['CURSOR', '(', 'subquery', ')']),
        # datetime_expression: first 터미널이 뭔지 못 찾음...
        # ('datetime_expression', ['expr', 'AT', 'LOCAL']),
        # ('datetime_expression', ['expr', 'AT', 'TIME', 'ZONE', '{datetime_expression::body}']),
        # ('{datetime_expression::body}', ['string']),
        # ('{datetime_expression::body}', ['DBTIMEZONE']),
        # ('{datetime_expression::body}', ['SESSIONTIMEZONE']),
        # ('{datetime_expression::body}', ['expr']),
        ('{expr_with_parenthesis}', ['(', 'expr', ')']),
        ('interval_expression', ['(', '{interval_expression::head}', ')', 'DAY', 'TO', 'SECOND']),
        ('interval_expression', ['(', '{interval_expression::head}', ')', 'DAY', '(', 'leading_field_precision', ')', 'TO', 'SECOND']),
        ('interval_expression', ['(', '{interval_expression::head}', ')', 'DAY', 'TO', 'SECOND', '(', 'fractional_second_precision', ')']),
        ('interval_expression', ['(', '{interval_expression::head}', ')', 'DAY', '(', 'leading_field_precision', ')', 'TO', 'SECOND', 'fractional_second_precision', ')', ]),
        ('interval_expression', ['(', '{interval_expression::head}', ')', 'YEAR', 'TO', 'MONTH']),
        ('interval_expression', ['(', '{interval_expression::head}', ')', 'YEAR', '(', 'leading_field_precision', ')', 'TO', 'MONTH']),
        ('{interval_expression::head}', [column, '-', column]),
        ('{interval_expression::head}', ['{expr_with_parenthesis}', '-', column]),
        ('{interval_expression::head}', [column, '-', '{expr_with_parenthesis}']),
        ('{interval_expression::head}', ['{expr_with_parenthesis}', '-', '{expr_with_parenthesis}']),
        ('placeholder_expression', [':', IDT]),
        ('placeholder_expression', [':', IDT, 'INDICATOR?', ':', IDT]),
        ('function_expression', ['single_row_function']),
        ('function_expression', ['aggregate_function']),
        ('function_expression', ['analytic_function']),
        ('function_expression', ['object_reference_function']),
        ('function_expression', ['model_function']),
        ('function_expression', ['OLAP_function']),
        ('function_expression', ['data_cartridge_function']),
        ('function_expression', ['user_defined_function']),
        ('single_row_function', ['numeric_function']),
        ('single_row_function', ['character_function']),
        ('single_row_function', ['datetime_function']),
        ('single_row_function', ['comparison_function']),
        ('single_row_function', ['conversion_function']),
        ('single_row_function', ['large_object_function']),
        ('single_row_function', ['collection_function']),
        ('single_row_function', ['hierarchical_function']),
        ('single_row_function', ['data_mining_function']),
        ('single_row_function', ['XML_function']),
        ('single_row_function', ['encoding_decoding_function']),
        ('single_row_function', ['NULL_related_function']),
        ('single_row_function', ['environment_id_function']),

        ('numeric_function', ['ABS', '(', 'expr', ')']),
        ('numeric_function', ['ACOS', '(', 'expr', ')']),
        ('numeric_function', ['ASIN', '(', 'expr', ')']),
        ('numeric_function', ['ATAN', '(', 'expr', ')']),
        ('numeric_function', ['ATAN2', '(', 'expr', ',', 'expr', ')']),
        ('numeric_function', ['BITAND', '(', 'expr', ',', 'expr', ')']),
        ('numeric_function', ['CEIL', '(', 'expr', ')']),
        ('numeric_function', ['COS', '(', 'expr', ')']),
        ('numeric_function', ['COSH', '(', 'expr', ')']),
        ('numeric_function', ['EXP', '(', 'expr', ')']),
        ('numeric_function', ['FLOOR', '(', 'expr', ')']),
        ('numeric_function', ['LN', '(', 'expr', ')']),
        ('numeric_function', ['LOG', '(', 'expr', ',', 'expr', ')']),
        ('numeric_function', ['MOD', '(', 'expr', ',', 'expr', ')']),
        ('numeric_function', ['NANVL', '(', 'expr', ',', 'expr', ')']),
        ('numeric_function', ['POWER', '(', 'expr', ',', 'expr', ')']),
        ('numeric_function', ['REMAINDER', '(', 'expr', ',', 'expr', ')']),
        ('numeric_function', ['ROUND', '(', 'expr', ')']),
        ('numeric_function', ['ROUND', '(', 'expr', ',', 'expr', ')']),
        ('numeric_function', ['SIGN', '(', 'expr', ')']),
        ('numeric_function', ['SIN', '(', 'expr', ')']),
        ('numeric_function', ['SINH', '(', 'expr', ')']),
        ('numeric_function', ['SQRT', '(', 'expr', ')']),
        ('numeric_function', ['TAN', '(', 'expr', ')']),
        ('numeric_function', ['TANH', '(', 'expr', ')']),
        ('numeric_function', ['TRUNC', '(', 'expr', ')']),
        ('numeric_function', ['TRUNC', '(', 'expr', ',', 'expr', ')']),
        ('character_function', ['ASCII', '(', 'expr', ')']),
        ('character_function', ['CHR', '(', 'expr', ')']),
        ('character_function', ['CHR', '(', 'expr', ',', 'USING', 'NCHAR_CS', ')']),
        ('character_function', ['CONCAT', '(', 'expr', ',', 'expr', ')']),
        ('character_function', ['INITCAP', '(', 'expr', ')']),
        ('character_function', ['LOWER|UPPER', '(', 'expr', ')']),
        ('character_function', ['LPAD|RPAD', '(', 'expr', ',', 'expr', ')']),
        ('character_function', ['LPAD|RPAD', '(', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['LTRIM|RTRIM', '(', 'expr', ')']),
        ('character_function', ['LTRIM|RTRIM', '(', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_REPLACE', '(', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_REPLACE', '(', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_REPLACE', '(', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_REPLACE', '(', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_REPLACE', '(', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_SUBSTR', '(', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_SUBSTR', '(', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_SUBSTR', '(', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_SUBSTR', '(', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_SUBSTR', '(', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_INSTR', '(', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_INSTR', '(', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_INSTR', '(', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_INSTR', '(', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_INSTR', '(', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_INSTR', '(', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_COUNT', '(', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_COUNT', '(', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REGEXP_COUNT', '(', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['REPLACE', '(', 'expr', ',', 'expr', ')']),
        ('character_function', ['REPLACE', '(', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['SUBSTR|SUBSTRB|SUBSTRC|SUBSTR2|SUBSTR4', '(', 'expr', ',', 'expr', ')']),
        ('character_function', ['SUBSTR|SUBSTRB|SUBSTRC|SUBSTR2|SUBSTR4', '(', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['INSTR|INSTRB|INSTRC|INSTR2|INSTR4', '(', 'expr', ',', 'expr', ')']),
        ('character_function', ['INSTR|INSTRB|INSTRC|INSTR2|INSTR4', '(', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['INSTR|INSTRB|INSTRC|INSTR2|INSTR4', '(', 'expr', ',', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['LENGTH|LENGTHB|LENGTHC|LENGTH2|LENGTH4', '(', 'expr', ')']),
        ('character_function', ['TRANSLATE', '(', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('character_function', ['TRIM', '(', 'expr', ')']),
        ('character_function', ['TRIM', '(', 'expr', 'FROM', 'expr', ')']),
        ('character_function', ['TRIM', '(', 'LEADING|TREAILING|BOTH', 'expr?', 'FROM', 'expr', ')']),
        ('datetime_function', ['ADD_MONTHS', '(', 'expr', ',', 'expr', ')']),
        ('datetime_function', ['EXTRACT', '(', 'YEAR|MONTH|DAY|HOUR|MINUTE|SECOND|TIMEZONE_HOUR|TIMEZONE_MINUTE|TIMEZONE_REGION|TIEMZONE_ABBR', 'FROM', 'expr', ')']),
        ('datetime_function', ['LAST_DAY', '(', 'expr', ')']),
        ('datetime_function', ['MONTHS_BETWEEN', '(', 'expr', ',', 'expr', ')']),
        ('datetime_function', ['NUMTODSINTERVAL', '(', 'expr', ',', string, ')']),
        ('datetime_function', ['NUMTOYMINTERVAL', '(', 'expr', ',', string, ')']),
        ('character_function', ['TO_CHAR', '(', 'expr', ')']),
        ('character_function', ['TO_CHAR', '(', 'expr', ',', 'expr', ')']),
        ('datetime_function', ['TO_DATE', '(', 'expr', ')']),
        ('datetime_function', ['TO_DATE', '(', 'expr', ',', 'expr', ')']),
        ('datetime_function', ['TO_TIMESTAMP', '(', 'expr', ')']),
        ('datetime_function', ['TO_TIMESTAMP', '(', 'expr', ',', 'expr', ')']),
        ('datetime_function', ['TO_TIMESTAMP_TZ', '(', 'expr', ')']),
        ('datetime_function', ['TO_TIMESTAMP_TZ', '(', 'expr', ',', 'expr', ')']),
        ('comparison_function', ['GREATEST|LEAST', '(', '{expr_list}', ')']),
        ('datetime_function', ['TO_NUMBER', '(', 'expr', ')']),
        ('datetime_function', ['TO_NUMBER', '(', 'expr', ',', 'expr', ')']),
        ('NULL_related_function', ['COALESCE', '(', '{expr_list}', ')']),
        ('NULL_related_function', ['NVL', '(', 'expr', ',', 'expr', ')']),
        ('NULL_related_function', ['NVL2', '(', 'expr', ',', 'expr', ',', 'expr', ')']),
        ('analytic_function', ['aggregate_function|CORR|{COUNT}|COVAR_POP|COVAR_SAMP|CUME_DIST|{DENSE_RANK}|{FIRST,LAST}|FIRST_VALUE|LAG|LAST|LAST_VALUE|'
                               'LEAD|{LISTAGG}||NTH_VALUE|NTILE|PERCENT_RANK|PERCENTILE_COUNT|PERCENTILE_DISC|{RANK}|'
                               'RATIO_TO_REPORT|ROW_NUMBER|STDDEV|STDDEV_POP|STDDEV_SAMP|VAR_POP|VAR_SAMP|VARIANCE'
            , '(', '{expr_list}?', ')', 'OVER', '(', 'analytic_clause', ')']),
        ('aggregate_function', ['AVG|MAX|MIN|SUM|MEDIAN', '(', 'DISTINCT|ALL?', 'expr', ')']),
        ('aggregate_function', ['AVG|MAX|MIN|SUM|MEDIAN', '(', 'DISTINCT|ALL?', 'expr', ')', 'OVER', '(', 'analytic_clause', ')']),
        ('{COUNT}', ['COUNT', '(', '*', ')', 'OVER', '(', 'analytic_clause', ')']),
        ('{COUNT}', ['COUNT', '(', 'DISTINCT|ALL?', 'expr', ')']),
        ('{COUNT}', ['COUNT', '(', 'DISTINCT|ALL?', 'expr', ')', 'OVER', '(', 'analytic_clause', ')']),
        ('{DENSE_RANK}', ['DENSE_RANK', '(', ')', 'OVER', '(', 'query_partition_clause?', 'order_by_clause', ')']),
        ('{DENSE_RANK}', ['DENSE_RANK', '(', '{expr_list}', ')', 'WITHIN', 'GROUP', '(', 'ORDER', 'BY', '{DENSE_RANK::body}', ')']),
        ('{DENSE_RANK::body}', ['expr', 'ASC|DESC?']),
        ('{DENSE_RANK::body}', ['expr', 'ASC|DESC?', 'NULLS', 'FIRST|LAST']),
        ('{DENSE_RANK::body}', ['{DENSE_RANK::body}', ',', '{DENSE_RANK::body}']),
        ('{FIRST,LAST}', ['aggregate_function', 'KEEP', '(', 'DENSE_RANK', 'FIRST|LAST', 'ORDER', 'BY', '{DENSE_RANK::body}', ')']),
        ('{RANK}', ['RANK', '(', '{expr_list}', ')', 'WITHIN', 'GROUP', '(', 'ORDER', 'BY', '{DENSE_RANK::body}', ')']),
        ('{RANK}', ['RANK', '(', ')', 'OVER', '(', 'query_partition_clause?', 'order_by_clause', ')']),
        ('{LISTAGG}', ['LISTAGG', '(', 'expr', ',', string, ')', 'WITHIN', 'GROUP', '(', 'order_by_clause', ')', 'OVER']),
        ('{LISTAGG}', ['LISTAGG', '(', 'expr', ',', string, ')', 'WITHIN', 'GROUP', '(', 'order_by_clause', ')', 'OVER', '(', 'query_partition_clause', ')']),
        ('analytic_clause', ['query_partition_clause']),
        ('analytic_clause', ['query_partition_clause?', 'order_by_clause', 'windowing_clause?']),
        ('windowing_clause', ['ROWS|RANGE', '{windowing_clause::body}']),
        ('{windowing_clause::body}', ['BETWEEN', '{windowing_clause::head}', 'AND', '{windowing_clause::tail}']),
        ('{windowing_clause::body}', ['UNBOUNDED', 'PRECEDING']),
        ('{windowing_clause::body}', ['CURRENT', 'ROW']),
        ('{windowing_clause::body}', ['value_expr', 'PRECEDING']),
        ('{windowing_clause::head}', ['UNBOUNDED', 'PRECEDING']),
        ('{windowing_clause::head}', ['CURRENT', 'ROW']),
        ('{windowing_clause::head}', ['value_expr', 'PRECEDING|FOLLOWING']),
        ('{windowing_clause::tail}', ['UNBOUNDED', 'FOLLOWING']),
        ('{windowing_clause::tail}', ['CURRENT', 'ROW']),
        ('{windowing_clause::tail}', ['value_expr', 'PRECEDING|FOLLOWING']),

        ('condition', ['comparison_condition']),
        ('condition', ['floating_point_condition']),
        ('condition', ['logical_condition']),
        ('condition', ['model_condition']),
        ('condition', ['multiset_condition']),
        ('condition', ['pattern_matching_condition']),
        ('condition', ['range_condition']),
        ('condition', ['null_condition']),
        ('condition', ['XML_condition']),
        ('condition', ['compound_condition']),
        ('condition', ['exists_condition']),
        ('condition', ['in_condition']),
        ('condition', ['os_of_type_condition']),

        ('{condition^logical_condition}', ['comparison_condition']),
        ('{condition^logical_condition}', ['floating_point_condition']),
        ('{condition^logical_condition}', ['model_condition']),
        ('{condition^logical_condition}', ['multiset_condition']),
        ('{condition^logical_condition}', ['pattern_matching_condition']),
        ('{condition^logical_condition}', ['range_condition']),
        ('{condition^logical_condition}', ['null_condition']),
        ('{condition^logical_condition}', ['XML_condition']),
        ('{condition^logical_condition}', ['compound_condition']),
        ('{condition^logical_condition}', ['exists_condition']),
        ('{condition^logical_condition}', ['in_condition']),
        ('{condition^logical_condition}', ['os_of_type_condition']),

        ('comparison_condition', ['simple_comparison_condition']),
        ('comparison_condition', ['group_comparison_condition']),
        ('simple_comparison_condition', ['expr', '=|!=|^=|<>|>|<|>=|<=', 'expr']),
        ('simple_comparison_condition', ['(', '{expr_list}', ')', '=|!=|^=|<>', '(', 'expression_list|subquery', ')']),

        ('group_comparison_condition', ['expr', '=|!=|^=|<>|>|<|>=|<=', 'ANY|SOME|ALL', '(', 'expression_list|subquery', ')']),
        ('group_comparison_condition', ['(', '{expr_list}', ')', '=|!=|^=|<>', 'ANY|SOME|ALL', '(', '{expression_list_list}|subquery', ')']),

        ('{expression_list_list}', ['expression_list']),
        ('{expression_list_list}', ['{expression_list_list}', ',', '{expression_list_list}']),
        ('compound_condition', ['(', 'compound_condition', ')']),
        ('logical_condition', ['NOT', '{condition^logical_condition}']),
        ('logical_condition', ['condition', 'AND|OR', 'condition']),
        ('pattern_matching_condition', ['expr', 'NOT?', 'LIKE|LIKEC|LIKE2|LIKE4', 'expr']),
        ('pattern_matching_condition', ['expr', 'NOT?', 'LIKE|LIKEC|LIKE2|LIKE4', 'expr', 'ESCAPE', string]),
        ('null_condition', ['expr', 'IS', 'NOT?', 'NULL']),
        ('range_condition', ['expr', 'NOT?', 'BETWEEN', 'expr', 'AND', 'expr']),
        ('exists_condition', ['EXISTS', '(', 'subquery', ')']),
        ('in_condition', ['expr', 'NOT?', 'IN', '(', 'expression_list|subquery', ')']),
        ('in_condition', ['(', '{expr_list}', ')', 'NOT?', 'IN', '(', '{expression_list_list}|subquery', ')']),
    ]
    pb = ParserBuilder()
    pb.build(data)
